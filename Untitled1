//#include <stdio.h>
//#include <stdlib.h>
//#include "glut.h"
//
//GLfloat Ball_specular[] = { 1.0, 1.0, 1.0, 1.0 };
//GLfloat Ball_diffuse[] = { 1.0, 0.0, 0.0, 1.0 };
//GLfloat Ball_shininess[] = { 50.0 };
//GLfloat Bar_specular[] = { 1.0, 1.0, 1.0, 1.0 };
//GLfloat Bar_diffuse[] = { 1.0, 1.0, 0.0, 1.0 };
//GLfloat Bar_shininess[] = { 50.0 };
//GLfloat Lives_diffuse[] = { 1.0, 1.0, 1.0, 1.0 };
//
//float BallX = 250, BallY = 40, BarX = 250, BarY = 10;
//float HizBallX = 0.0, HizBallY = 0.0;
//int width = 500, height = 500, lives = 5;
//
//unsigned char header[54]; // BMP dosyalarý 54-byte header içerir
//unsigned int dataPos;     // Piksel verilerinin baþlangýç adresi
//unsigned int imageWidth, imageHeight, imageSize;
//unsigned char *data;
//static GLuint texName;
//
//GLuint loadBMP_custom(const char * imagepath){
//	// Open the file
//	FILE * file = fopen(imagepath, "rb");
//	if (!file){
//		printf("Image could not be opened\n"); 
//		return 0;
//	}
//	if ( fread(header, 1, 54, file)!=54 ){ // If not 54 bytes read : problem
//		printf("Not a correct BMP file\n");
//		return 0;
//	}
//	if ( header[0]!='B' || header[1]!='M' ){
//		printf("Not a correct BMP file\n");
//		return 0;
//	}
//	// Read ints from the byte array
//	dataPos     = *(int*)&(header[0x0A]);
//	imageSize   = *(int*)&(header[0x22]);
//	imageWidth  = *(int*)&(header[0x12]);
//	imageHeight = *(int*)&(header[0x16]);
//	// Some BMP files are misformatted, guess missing information
//	if (imageSize==0)    imageSize=imageWidth*imageHeight*3; // 3 : one byte for each Red, Green and Blue component
//	if (dataPos==0)      dataPos=54; // The BMP header is done that way
//
//	// Create a buffer
//	data = new unsigned char [imageSize];
//	// Read the actual data from the file into the buffer
//	fread(data,1,imageSize,file);
//	//Everything is in memory now, the file can be closed
//	fclose(file);
//}
//
//void init(void){
//	GLfloat light0_position[] = { 100, 100, 100 };
//	GLfloat light1_position[] = { -100, -100, 100 };
//	GLfloat light0_color[] = { 1.0, 1.0, 1.0, 0.0 };
//	GLfloat light1_color[] = { 1.0, 1.0, 1.0, 0.0 };
//
//	glClearColor (0.0, 0.0, 0.0, 0.0);
//	glShadeModel (GL_SMOOTH);
//
//	glLightfv(GL_LIGHT0, GL_POSITION, light0_position);
//	glLightfv(GL_LIGHT1, GL_POSITION, light1_position);
//	glLightfv(GL_LIGHT0, GL_DIFFUSE, light0_color);
//	glLightfv(GL_LIGHT1, GL_DIFFUSE, light1_color);
//
//    GLuint image = loadBMP_custom("opengl.bmp"); // *data içine BMP resmi yükleyen fonk.
//	glGenTextures(1, &texName);
//	glBindTexture(GL_TEXTURE_2D, texName);
//
//	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
//	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
//	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
//	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
//	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, imageWidth, imageHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, data); 
//
//	glEnable(GL_LIGHTING);
//	glEnable(GL_LIGHT0);
//	glEnable(GL_LIGHT1);
//	glEnable(GL_DEPTH_TEST);
//}
//
//void display(void){
//	glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
//
//    glBindTexture(GL_TEXTURE_2D, texName);
//
//	glEnable(GL_TEXTURE_2D);
//	glPushMatrix();	
//	glBegin(GL_POLYGON);								
//		glTexCoord2f(0, 0);		glVertex3f(0, 0, 0);     
//		glTexCoord2f(0, 1);		glVertex3f(0, height-20, 0);       
//		glTexCoord2f(1, 1);		glVertex3f(width, height-20, 0);        
//		glTexCoord2f(1, 0);		glVertex3f(width, 0, 0);    
//	glEnd();
//	glPopMatrix();
//    glDisable(GL_TEXTURE_2D);
//		
//	// Kalan haklarýn çizimi
//	glMaterialfv(GL_FRONT, GL_DIFFUSE, Lives_diffuse);
//	for (int i = 0; i < lives; i++){
//		glRectf(20*i, height, 20 * i + 19, height-20);
//	}
//	
//	// Vurulacak barlarýn çizimi 
//	
//
//
//	
//	
//	glMaterialfv(GL_FRONT, GL_DIFFUSE, Bar_diffuse);
//
//	if (BallX <= 20 || BallX >= width-20) 
//		HizBallX *= -1;
//	if (BallY >= height-40) 
//		HizBallY *= -1;
//	if (BallY < 40)
//		if (abs(BallX-BarX) < 60)
//			HizBallY *= -1;
//		else {
//			lives--;
//			if (!lives) exit(0);
//			BallX = 250;
//			BallY = 40;
//			HizBallX = HizBallY = 0;
//		}
//			
//	BallX += HizBallX;
//	BallY += HizBallY;
//	
//	// Topun çizimi
//	glPushMatrix();
//		glMaterialfv(GL_FRONT, GL_DIFFUSE, Ball_diffuse);
//		glMaterialfv(GL_FRONT, GL_SPECULAR, Ball_specular);
//		glMaterialfv(GL_FRONT, GL_SHININESS, Ball_shininess);
//		glTranslatef(BallX, BallY, 0);
//		glutSolidSphere(20, 20, 16);
//	glPopMatrix();
//	
//	
//	
//	
//	// Barýn çizimi
//	glPushMatrix();
//		glMaterialfv(GL_FRONT, GL_DIFFUSE, Bar_diffuse);
//		glMaterialfv(GL_FRONT, GL_SPECULAR, Bar_specular);
//		glMaterialfv(GL_FRONT, GL_SHININESS, Bar_shininess);
//		glTranslatef(BarX, BarY, 0);
//		glScalef(5, 1, 1);
//		glutSolidCube(20);
//	glPopMatrix();
//	
//
//
//	glFlush();
//}
//
//void reshape(int w, int h){
//	glViewport (0, 0, (GLsizei) w, (GLsizei) h);
//	glMatrixMode (GL_PROJECTION);
//	glLoadIdentity();
//	glOrtho (0, w, 0, h, -100, 100);
//	glMatrixMode(GL_MODELVIEW);
//	width = w;
//	height = h;
//}
//
//void keyboard(unsigned char key, int x, int y){
//	switch (key) {
//		case 27:
//			exit(0);
//			break;
//	}
//}
//
//void mouse(int button, int state, int x, int y){
//	if (button == 0 && state == 0 && HizBallX == 0 && HizBallY == 0){
//		HizBallX = 0.5;
//		HizBallY = 0.7;
//	}
//	glutPostRedisplay();
//}
//
//void passive_motion(int x, int y){
//	BarX = x;
//	if (HizBallX == 0 && HizBallY == 0)
//		BallX = BarX;
//}
//
//void timer(int value){
//	HizBallX *= 1.1; // Top her saniye %10 hýzlanýr
//	HizBallY *= 1.1;
//	glutTimerFunc(1000, timer, 0);
//}
//
//int main(int argc, char** argv){
//	glutInit(&argc, argv);
//	glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
//	glutInitWindowSize (500, 500); 
//	
//	glutCreateWindow (argv[0]);
//	init ();
//	glutDisplayFunc(display); 
//	glutReshapeFunc(reshape);
//	glutKeyboardFunc(keyboard);
//	glutMouseFunc(mouse);
//	glutPassiveMotionFunc(passive_motion);
//	glutTimerFunc(1000, timer, 0);
//	glutIdleFunc(display);
//	glutMainLoop();
//}
//
//
//
//
//
//

